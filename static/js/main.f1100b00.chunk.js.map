{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Artwork","artwork","width","height","alt","props","className","src","url","replaceAll","get","p","o","reduce","xs","x","Album","album","useState","modalIsOpen","setIsOpen","attributes","notes","title","closeModal","genre","genreNames","filter","a","year","Date","releaseDate","getFullYear","isOpen","onRequestClose","contentLabel","artistName","name","onClick","type","aria-label","href","contentRating","dangerouslySetInnerHTML","__html","setNotes","NewAlbumList","albums","setAlbums","useEffect","fetch","res","json","data","as","map","id","Modal","setAppElement","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1100b00.chunk.js","sourcesContent":["import './App.css';\nimport {useEffect, useState} from 'react';\nimport Modal from 'react-modal';\n\nfunction Artwork({artwork, width = 100, height = 100, alt = \"\", ...props}) {\n    return (\n        <>\n            <img className={'album-art'} src={artwork.url.replaceAll(\"{w}\", width).replaceAll(\"{h}\", height)}\n                 alt={alt} {...props} />\n        </>\n    )\n}\n\nconst get = p => o =>\n    p.reduce((xs, x) =>\n        (xs && xs[x]) ? xs[x] : null, o)\n\nfunction Album({album}) {\n    const [modalIsOpen, setIsOpen] = useState(false);\n    const {attributes} = album\n    const notes = get(['editorialNotes', 'standard'])(attributes)\n    const title = get(['editorialNotes', 'short'])(attributes)\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n    const setNotes = (notes) => {\n        return {__html: notes};\n    }\n    const genre = attributes.genreNames.filter((a) => a !== 'Music')[0]\n    const year = new Date(attributes.releaseDate).getFullYear();\n    return <div className={'album'}>\n        <Modal\n            isOpen={modalIsOpen}\n            onRequestClose={closeModal}\n            className={'modal'}\n            contentLabel={`${attributes.artistName} - ${attributes.name} album details`}\n        >\n            <div className={'close-wrapper'}>\n                <button className={'close-modal-btn'} onClick={closeModal} type={\"button\"} aria-label={\"close\"}>Ã—\n                </button>\n            </div>\n            <div className={'modal-wrapper'}>\n                <a href={attributes.url}>\n                    <Artwork title={title} className={'modal-album-art'} width={400} height={400}\n                             artwork={attributes.artwork}\n                             alt={`${attributes.artistName} - ${attributes.name} album artwork`}/>\n                </a>\n                <div className={'modal-album-details'}>\n                    <div>\n                        <h1 className={\"modal-album-name\"}>\n                            {album.attributes.name}\n                            <div className={\"explicit\"}>{attributes.contentRating === \"explicit\" && \"ðŸ…´\"}</div>\n                        </h1>\n                    </div>\n                    <div className={\"modal-artist-name\"}>\n                        <h1>\n                            {album.attributes.artistName}\n                        </h1>\n                    </div>\n                    <div className={\"modal-album-genre\"}>\n                        {genre} - {year}\n                    </div>\n                    <div className={'modal-notes-wrap'}>\n                        <p className={'modal-editors-notes'} dangerouslySetInnerHTML={setNotes(notes)}/>\n                    </div>\n                </div>\n            </div>\n        </Modal>\n\n        <Artwork title={title} width={200} height={200} artwork={attributes.artwork}\n                 alt={`${attributes.artistName} - ${attributes.name} album artwork`} onClick={() => openModal()}/>\n        <div className={\"artist-name\"}>\n            <p>\n                {album.attributes.artistName}\n            </p>\n            <span className={\"explicit\"}>{attributes.contentRating === \"explicit\" && \"ðŸ…´\"}</span>\n        </div>\n        <div>\n            <p className={\"album-name\"}>\n                {album.attributes.name}\n            </p>\n        </div>\n    </div>\n}\n\nfunction NewAlbumList() {\n    const [albums, setAlbums] = useState([])\n    useEffect(() => {\n        get()\n    }, [])\n    const get = async () => {\n        const res = await fetch(\"/new-music-archive/archive/2021-05-07.json\");\n        const {data} = await res.json();\n        setAlbums(data)\n    }\n    const as = albums.map((album) => {\n        return <Album album={album} key={album.id}/>\n    })\n    return <div className={\"album-list\"}>{as}</div>\n}\n\nModal.setAppElement('#root')\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <NewAlbumList/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}